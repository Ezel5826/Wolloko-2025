import colectivo.*


describe 
"comportamiento de la nafta" {
    method initialize() {
    colectivo.nafta_actual(10)
    const ruta = new Ruta()
  }  
    test "gasto nafta normal" {
        assert.equals(5,colectivo.gasto_nafta(40))
  }
    test "gasto nafta muchas personas" {
        assert.equals(3001,colectivo.gasto_nafta(30000))    
  }
    test "gasto nafta con personas imposibles" {
        assert.equals(1,colectivo.gasto_nafta(0.5))
  }
    test "gasto nafta con personas negativas" {
        assert.equals(1,colectivo.gasto_nafta(-1))
  }
    test "gasto de nafta en una ruta normalita" {
        ruta.add(5)
        assert.equals(5.9, colectivo.gasto_nafta_por_ruta(ruta.paradas()))
  }
    test "gasto de nafta en una ruta mas chica" {
        assert.equals(2.1, colectivo.gasto_nafta_por_ruta([0,1,0]))
  }
    test "gasto de nafta en una ruta de longitud 2" {
      ruta.add(2)
        assert.equals(1, colectivo.gasto_nafta_por_ruta(ruta.paradas()))
  }
    test "gasto de nafta en una ruta de longitud 1" {
      ruta.add(1)
        assert.equals(0, colectivo.gasto_nafta_por_ruta(ruta.paradas()))
  }
    test "gasto de nafta en una ruta vacia" {
      ruta.add(0)
        assert.equals(0, colectivo.gasto_nafta_por_ruta(ruta.paradas()))
  }
    test "gasto de nafta en una ruta con personas negativas" {
        assert.equals(6.1, colectivo.gasto_nafta_por_ruta([0,-1,9,3,0]))
  }
    test "gasto de nafta en una ruta enorme" {
        assert.equals(45.1, colectivo.gasto_nafta_por_ruta([0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0]))
  }
    test "recargar nafta sin excedente" {
    ruta.recargarNafta(10)
    assert.equals(20, colectivo.recargar_nafta(ruta.recargarNafta()))
  }
    test "recargar nafta en exceso" {
        ruta.recargarNafta(colectivo.max_nafta()+10)
        assert.equals(colectivo.max_nafta(), colectivo.recargar_nafta(ruta.recargarNafta()))
  }
    test "recargar nafta con coma" {
        ruta.recargarNafta(1.1)
        assert.equals(11.1, colectivo.recargar_nafta(ruta.recargarNafta()))
  }
    test "recargar nafta negativa" {
        ruta.recargarNafta(-1)
        assert.equals(10, colectivo.recargar_nafta(ruta.recargarNafta()))
  }
    test "recargar nada de nafta" {
      ruta.recargarNafta(0)
        assert.equals(10, colectivo.recargar_nafta(ruta.recargarNafta()))
  }
    test "gasto por paradas restantes normalito"  {
        assert.equals(7.6, colectivo.gasto_nafta_paradas_restantes(10,[0,1,3,10,0],1))
  }
    test "gasto por paradas restantes nulas" {
        assert.equals(0, colectivo.gasto_nafta_paradas_restantes(0,[0,1,3,4,0],5))
  }
    test "gasto por paradas restantes negativas" {
        assert.equals(0, colectivo.gasto_nafta_paradas_restantes(0,[0,1,3,4,0],-1))
  }
    test "gasto por paradas restantes = 0" {
        assert.equals(0, colectivo.gasto_nafta_paradas_restantes(0,[0,1,3,4,0],4))
  }
    test "gasto por paradas restantes con personas nulas" {
        assert.equals(0, colectivo.gasto_nafta_paradas_restantes(-10,[0,1,3,4,0],0))
  }
    test "gasto por paradas restantes con personas nulas en las paradas" {
        assert.equals(4.7, colectivo.gasto_nafta_paradas_restantes(0,[0,1,-3,4,0],0))
  }
}
describe "Pruebas del colectivo" {
  test "pruebas con subir gente" {
    colectivo.subir_gente(50)
    assert.equals(50,colectivo.pasajeros_subidos())
    
  }
  test "pruebas con subir gente " {
    colectivo.subir_gente(1000)
    assert.equals(100,colectivo.pasajeros_subidos())
  }
}

