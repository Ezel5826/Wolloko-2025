import colectivo.*


describe 
"comportamiento de la nafta" {
    method initialize() {
    // const colectivo = new Colectivo()
    const ruta = new Ruta(paradasPrueba=[])
    colectivo.nafta_actual(10)
  }  
    test "gasto nafta normal" {
        assert.equals(5,colectivo.gasto_nafta(40))
  }
    test "gasto nafta muchas personas" {
        assert.equals(3001,colectivo.gasto_nafta(30000))    
  }
    test "gasto nafta con personas imposibles" {
        assert.equals(1,colectivo.gasto_nafta(0.5))
  }
    test "gasto nafta con personas negativas" {
        assert.equals(1,colectivo.gasto_nafta(-1))
  }
   test "gasto de nafta en una ruta normalita" {
    ruta.paradasPrueba([new Paradas(cant_gente=0),new Paradas(cant_gente=1),new Paradas(cant_gente=3),new Paradas(cant_gente=10),new Paradas(cant_gente=0)])
        assert.equals(5.9, colectivo.gasto_nafta_por_ruta(ruta.paradasPrueba()))
  }
    test "gasto de nafta en una ruta mas chica" {
      ruta.paradasPrueba([new Paradas(cant_gente=0),new Paradas(cant_gente=1),new Paradas(cant_gente=0)])
        assert.equals(2.1, colectivo.gasto_nafta_por_ruta(ruta.paradasPrueba()))
  }
    test "gasto de nafta en una ruta de longitud 2" {
      ruta.paradasPrueba([new Paradas(cant_gente=0),new Paradas(cant_gente=0)])
        assert.equals(1, colectivo.gasto_nafta_por_ruta(ruta.paradasPrueba()))
  }
    test "gasto de nafta en una ruta de longitud 1" {
      ruta.paradasPrueba([new Paradas(cant_gente=0)])
        assert.equals(0, colectivo.gasto_nafta_por_ruta(ruta.paradasPrueba()))
  }
    test "gasto de nafta en una ruta vacia" {
        assert.equals(0, colectivo.gasto_nafta_por_ruta(ruta.paradasPrueba()))
  }
    test "gasto de nafta en una ruta con personas negativas" {
        ruta.paradasPrueba([new Paradas(cant_gente=0),new Paradas(cant_gente=-1),new Paradas(cant_gente=9),new Paradas(cant_gente=3),new Paradas(cant_gente=0)])
        assert.equals(6.1, colectivo.gasto_nafta_por_ruta(ruta.paradasPrueba()))
  }
    test "gasto de nafta en una ruta enorme" {
        const lista = []
        23.times({x => lista.add(new Paradas(cant_gente=1))})
        ruta.set_terminals(lista)
        ruta.paradasPrueba(lista)
        assert.equals(45.1, colectivo.gasto_nafta_por_ruta(ruta.paradasPrueba()))
  }
    test "recargar nafta sin excedente" {
        const add = 10
        ruta.recargarNafta(add)
        //consultar sobre como es eso que si es clase se actualiza el valor y que si es objeto el valor no se actualiza
        assert.equals(colectivo.nafta_actual() + add, colectivo.recargar_nafta(ruta.recargarNafta()))
  }
    test "recargar nafta en exceso" {
        ruta.recargarNafta(colectivo.max_nafta()+10)
        assert.equals(colectivo.max_nafta(), colectivo.recargar_nafta(ruta.recargarNafta()))
  }
    test "recargar nafta con coma" {
        const add = 1.1
        ruta.recargarNafta(add)
        assert.equals(colectivo.nafta_actual() + add, colectivo.recargar_nafta(ruta.recargarNafta()))
  }
    test "recargar nafta negativa" {
        const add=-1
        ruta.recargarNafta(add)
        assert.equals(colectivo.nafta_actual() , colectivo.recargar_nafta(ruta.recargarNafta()))
  }
    test "recargar nada de nafta" {
        const add = 0
        ruta.recargarNafta(add)
        assert.equals(colectivo.nafta_actual(), colectivo.recargar_nafta(ruta.recargarNafta()))
  }
    test "gasto por paradas restantes normalito"  {
        ruta.paradasPrueba([new Paradas(cant_gente=0),new Paradas(cant_gente=1),new Paradas(cant_gente=3),new Paradas(cant_gente=10),new Paradas(cant_gente=0)])
        colectivo.pasajeros_subidos(10)
        ruta.parada_actual(1)
        assert.equals(7.6, colectivo.gasto_nafta_paradas_restantes(colectivo.pasajeros_subidos(),ruta.paradasPrueba(),ruta.parada_actual()))
  }
    test "gasto por paradas restantes nulas" {
        ruta.paradasPrueba([new Paradas(cant_gente=0),new Paradas(cant_gente=-1),new Paradas(cant_gente=3),new Paradas(cant_gente=10),new Paradas(cant_gente=0)])
        colectivo.pasajeros_subidos(14)
        ruta.parada_actual(5)
        assert.equals(0, colectivo.gasto_nafta_paradas_restantes(colectivo.pasajeros_subidos(),ruta.paradasPrueba(),ruta.parada_actual()))
  }
    test "gasto por paradas restantes negativas" {
        ruta.paradasPrueba([new Paradas(cant_gente=0),new Paradas(cant_gente=-1),new Paradas(cant_gente=3),new Paradas(cant_gente=10),new Paradas(cant_gente=0)])
        colectivo.pasajeros_subidos(14)
        ruta.parada_actual(-1)
        assert.equals(0, colectivo.gasto_nafta_paradas_restantes(colectivo.pasajeros_subidos(),ruta.paradasPrueba(),ruta.parada_actual()))
  }
    test "gasto por paradas restantes = 0" {
        ruta.paradasPrueba([new Paradas(cant_gente=0),new Paradas(cant_gente=-1),new Paradas(cant_gente=3),new Paradas(cant_gente=10),new Paradas(cant_gente=0)])
        colectivo.pasajeros_subidos(23)
        ruta.parada_actual(ruta.paradasPrueba().size()-1)
        assert.equals(0, colectivo.gasto_nafta_paradas_restantes(colectivo.pasajeros_subidos(),ruta.paradasPrueba(),ruta.parada_actual()))
  }
    test "gasto por paradas restantes con personas nulas" {
      ruta.paradasPrueba([new Paradas(cant_gente=0),new Paradas(cant_gente=-1),new Paradas(cant_gente=3),new Paradas(cant_gente=10),new Paradas(cant_gente=0)])
        colectivo.pasajeros_subidos(-10)
        ruta.parada_actual(0)
        assert.equals(0, colectivo.gasto_nafta_paradas_restantes(colectivo.pasajeros_subidos(),ruta.paradasPrueba(),ruta.parada_actual()))
  }
    test "gasto por paradas restantes con personas nulas en las paradas" {
        ruta.paradasPrueba([new Paradas(cant_gente=0),new Paradas(cant_gente=1),new Paradas(cant_gente=-3),new Paradas(cant_gente=4),new Paradas(cant_gente=0)])
        colectivo.pasajeros_subidos(0)
        ruta.parada_actual(0)
        assert.equals(4.7, colectivo.gasto_nafta_paradas_restantes(colectivo.pasajeros_subidos(),ruta.paradasPrueba(),ruta.parada_actual()))
  }
}
describe "Pruebas del colectivo" {
  test "pruebas con subir gente" {
    colectivo.subir_gente(50)
    assert.equals(50,colectivo.pasajeros_subidos())
    
  }
  test "pruebas con subir gente " {
    colectivo.subir_gente(1000)
    assert.equals(100,colectivo.pasajeros_subidos())
  }
}

